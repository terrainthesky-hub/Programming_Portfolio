{"pageProps":{"postData":{"id":"2020-9-24-KNN algorithm breakdown","contentHtml":"<p>I followed this guide on how to solve the KNN algorithm: https://machinelearningmastery.com/tutorial-to-implement-k-nearest-neighbors-in-python-from-scratch/</p>\n<p>KNearestNeighbors is essentially just finding the things that are closest in distance.</p>\n<p>The KNearestNeighbors algorithm is fairly simple to make without libraries, you find the euclidiean distance by subtracting the first iterated\nrow by the target we want to find closest. After that we square the number and find the square root to avoid negative numbers.\nIn the simplest sense we are, subtracting every row by the target to find which row is closest distance to the target.</p>\n<pre><code>  def euclidiean_distance(row1, row2):\n      distance = 0.0\n      for i in range(len(row1)-1):\n\t  distance += (row1[i] - row2[i])**2\n      return sqrt(distance)\n      \n \n</code></pre>\n<p>Doing the rest without libraries is a lot trickier. To get the neighbors you need to append the distances to a list so they're\nstored in memory then you sort the distances with a custom key so that the second item in the tuple is used in sorting. Finally,\nyou create another list and iterate the distances based on how many number of neighbors you want returned.</p>\n<pre><code>def get_neighbors(train, test_row, num_neighbors):\n      distances = list()\n      for train_row in train:\n\t  dist = euclidiean_distance(test_row, train_row)\n\t  distances.append((train_row, dist))         \n      distances.sort(key=lambda tup: tup[1])\n      neighbors = list()\n      for i in range(num_neighbors):\n\t  neighbors.append(distances[i][0])\n      return neighbors\n</code></pre>\n<p>Then finally we can get the neighbors of a point in the dataset by selecting how many neighbors we want:</p>\n<pre><code>  dataset = [[2.7810836,2.550537003,0],\n\t[1.465489372,2.362125076,0],\n\t[3.396561688,4.400293529,0],\n\t[1.38807019,1.850220317,0],\n\t[3.06407232,3.005305973,0],\n\t[7.627531214,2.759262235,1],\n\t[5.332441248,2.088626775,1],\n\t[6.922596716,1.77106367,1],\n\t[8.675418651,-0.242068655,1],\n\t[7.673756466,3.508563011,1]]\n\n  neighbors = get_neighbors(dataset, dataset[0], 3)\n\n  for neighbor in neighbors:\n      print(neighbor)\n\n We get an output of:\n  [4.6, 3.1, 1.5, 0.2, 2]\n  [4.6, 3.2, 1.4, 0.2, 2]\n  [4.7, 3.2, 1.6, 0.2, 2]\n</code></pre>\n<p>To predict a class based on KNN, we iterate through the class row in neighbors, then we find the max() of that which returns\nthe largest number. The max() function takes a set of unique class values and calls the count on the list of class values for each class value in the set.</p>\n<pre><code>def predict_classification(train, test_row, num_neighbors):\n    neighbors = get_neighbors(train, test_row, num_neighbors)\n    output_values = [row[-1] for row in neighbors]\n    prediction = max(set(output_values), key=output_values.count)\n    return prediction\n\nprediction = predict_classification(dataset, dataset[0], 3)\nprint('Expected %d, Got %d.' % (dataset[0][-1], prediction))\nExpected 2, Got 2.\n</code></pre>\n"}},"__N_SSG":true}